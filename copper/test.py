# # stacklenght = [
# #     69.45,
# #     69.14,
# #     68.35,
# #     68.07,
# #     68.31,
# #     68.80,
# #     71.47,
# #     70.80,
# #     71.42,
# #     72.44,
# #     70.61,
# #     69.20,
# #     68.52,
# #     68.62,
# #     68.86,
# #     69.54,
# #     71.52,
# #     69.70,
# #     68.59,
# #     68.37,
# #     67.70,
# #     67.63,
# #     68.61,
# #     69.11,
# #     69.75,
# #     69.65,
# #     68.97,
# #     67.98,
# #     68.00,
# #     69.03,
# #     69.89,
# #     70.37,
# #     70.92,
# #     70.77,
# #     69.95,
# #     69.50,
# #     68.28,
# #     68.04,
# #     68.59,
# #     68.96,
# #     69.37,
# #     68.80,
# #     68.50,
# #     68.32,
# #     68.19,
# #     67.87,
# #     68.25,
# #     68.62
# # ]
# #
# # # Python program to get average of a list
# # def Average(lst):
# #     return sum(lst) / len(lst)
# #
# #     # Driver Code
# #     lst = [15, 9, 55, 41, 35, 20, 62, 49]
# #     average = Average(lst)
# #
# #     # Printing average of the list
# #     print("Average of the list =", round(average, 2))
# #
# # print(Average(stacklenght))
# #
# from math import pi
#
# import matplotlib.pyplot as plt
# from numpy import linspace
# # a = 0
# # b = 30
# # c = 121
# # rot = linspace(a+61, b+61, c)
# # alp = linspace(a, -b*2, c)
# # print(list(zip(rot, alp)))
# # print(len(list(zip(rot, alp))))
# #
# # # temp0 = list(linspace(0, 90, 361))
# # # angle = temp0 * 2
# # # temp1 = [25] * len(temp0)
# # # temp2 = [50] * len(temp0)
# # # current = temp1 + temp2
# # # print(list(zip(current, angle)))
# # #
# # # print(len(current))
#
# print(linspace(-24, 24, 193))
# #
# # y = [0.0000, 0.0974, 0.1949, 0.3004, 0.3343, 0.3609, 0.3900, 0.4110, 0.4354, 0.4609, 0.4895, 0.5102,
# #                    0.5362, 0.5611, 0.5893, 0.6102, 0.6362, 0.6608, 0.6854, 0.7066, 0.7355, 0.7613, 0.7893, 0.8092,
# #                    0.8344, 0.8596, 0.8826, 0.9015, 0.9230, 0.9433, 0.9640, 0.9857, 1.0048, 1.0309, 1.0556, 1.0780,
# #                    1.0998, 1.1200, 1.1397, 1.1597, 1.1796, 1.1998, 1.2180, 1.2366, 1.2552, 1.2736, 1.2936, 1.3086,
# #                    1.3265, 1.3433, 1.3597, 1.3764, 1.3946, 1.4072, 1.4219, 1.4357, 1.4495, 1.4633, 1.4771, 1.4920,
# #                    1.5018, 1.5114, 1.5198, 1.5284, 1.5375, 1.5459, 1.5545, 1.5634, 1.5719, 1.5805, 1.5895, 1.5981,
# #                    1.6048, 1.6119, 1.6188, 1.6256, 1.6325, 1.6393, 1.6462, 1.6529, 1.6591, 1.6630, 1.6733]
# #
# # x = [0.0000, 119.4373, 177.5188, 221.0054, 241.0910, 251.9625, 265.3464, 277.0617, 287.0970, 299.6462,
# #                    313.8689, 326.4229, 338.1333, 351.5214, 365.7444, 379.9749, 393.3619, 407.5887, 420.9770, 436.0455,
# #                    453.6212, 470.3617, 487.9383, 504.6847, 521.4258, 539.8434, 555.7485, 571.6575, 590.0790, 608.5016,
# #                    626.9239, 645.3451, 663.7690, 682.1858, 700.6040, 717.3479, 734.0924, 752.5152, 770.9384, 789.3614,
# #                    807.7844, 826.2072, 844.6320, 863.0563, 881.4807, 899.9052, 918.3281, 936.7561, 955.1812, 973.6074,
# #                    992.0339, 1010.4602, 1028.8849, 1047.3153, 1065.7436, 1084.1728, 1102.6020, 1121.0312, 1139.4604,
# #                    1157.8884, 1176.3217, 1194.7550, 1213.1896, 1231.6240, 1250.0580, 1268.4925, 1286.9270, 1305.3610,
# #                    1323.7956, 1342.2299, 1360.6640, 1379.0984, 1397.5347, 1415.9706, 1434.4067, 1452.8430, 1471.2791,
# #                    1489.7153, 1508.1514, 1526.5877, 1545.0245, 1557.5954, 1582.7347]
# #
# # fig = plt.figure(figsize=(6, 4))
# # plt.scatter(x, y, label="A36")
# # plt.grid()
# # plt.xticks(fontsize=12)
# # plt.yticks(fontsize=12)
# # plt.xlabel("Magnetic field strength [A/m]", fontsize=12)
# # plt.ylabel("Magnetic field density [T]", fontsize=12)
# # plt.legend(fontsize=12)
# #
# # plt.savefig("media/a36bh", dpi=300)
#
# # i0 = 25
# # Nturns = 8  # turns of the coil in one slot [u.]
# # nturns = 34  # paralell copper conductors in one turn [u.]
# # d_cond = 0.67  # diameter of a copper conductor based on IEC 60217-0-1:2013+AMD1:2019 [m]
# # A_cond = (pow(d_cond / 2, 2)) * pi
# # coil_area = Nturns * nturns * A_cond
# # turn_area = nturns * A_cond
# # print(turn_area)
# # J20 = i0 / turn_area
# # J1 = i0 / coil_area
# # print(J1, J20)
# # slot_area = 142.793  # area of the slot [m^2]
# # fill = coil_area / slot_area
# # print(fill)
# # print(coil_area)
# #
# # full = A_cond*272
# # fillfull = full / slot_area
# # print(fillfull)
#
# Nturns = 8 # turns of the coil in one slot [u.]
# nturns = 20  # paralell copper conductors in one turn [u.]
# d_cond = 0.67  # diameter of a copper conductor based on IEC 60217-0-1:2013+AMD1:2019 [mm]
# A_cond = (pow(d_cond / 2, 2)) * pi
# coil_area = Nturns * nturns * A_cond
#
# print(coil_area*4)
import numpy as np

h = [0, 21.6667, 43.3333, 65.0, 86.6667, 108.3333, 130.0, 151.6667, 173.3333, 195.0, 196.0, 299.7884,
                   404.5767, 509.3651, 614.1534, 718.9418, 823.7302, 928.5185, 1033.3069, 1138.0952, 1242.8836,
                   1347.672, 1452.4603, 1557.2487, 1662.037, 1766.8254, 1871.6138, 1976.4021, 2081.1905, 2185.9788,
                   2290.7672, 2395.5556, 2500.3439, 2605.1323, 2709.9206, 2814.709, 2919.4974, 3024.2857, 3129.0741,
                   3233.8624, 3338.6508, 3443.4392, 3548.2275, 3653.0159, 3757.8042, 3862.5926, 3967.381, 4072.1693,
                   4176.9577, 4281.746, 4386.5344, 4491.3228, 4596.1111, 4700.8995, 4805.6878, 4910.4762, 5015.2646,
                   5120.0529, 5224.8413, 5329.6296, 5434.418, 5539.2063, 5643.9947, 5748.7831, 5853.5714, 5958.3598,
                   6063.1481, 6167.9365, 6272.7249, 6377.5132, 6482.3016, 6587.0899, 6691.8783, 6796.6667, 6901.455,
                   7006.2434, 7111.0317, 7215.8201, 7320.6085, 7425.3968, 7530.1852, 7634.9735, 7739.7619, 7844.5503,
                   7949.3386, 8054.127, 8158.9153, 8263.7037, 8368.4921, 8473.2804, 8578.0688, 8682.8571, 8787.6455,
                   8892.4339, 8997.2222, 9102.0106, 9206.7989, 9311.5873, 9416.3757, 9521.164, 9625.9524, 9730.7407,
                   9835.5291, 9940.3175, 10045.1058, 10149.8942, 10254.6825, 10359.4709, 10464.2593, 10569.0476,
                   10673.836, 10778.6243, 10883.4127, 10988.2011, 11092.9894, 11197.7778, 11302.5661, 11407.3545,
                   11512.1429, 11616.9312, 11721.7196, 11826.5079, 11931.2963, 12036.0847, 12140.873, 12245.6614,
                   12350.4497, 12455.2381, 12560.0265, 12664.8148, 12769.6032, 12874.3915, 12979.1799, 13083.9683,
                   13188.7566, 13293.545, 13398.3333, 13503.1217, 13607.9101, 13712.6984, 13817.4868, 13922.2751,
                   14027.0635, 14131.8519, 14236.6402, 14341.4286, 14446.2169, 14551.0053, 14655.7937, 14760.582,
                   14865.3704, 14970.1587, 15074.9471, 15179.7354, 15284.5238, 15389.3122, 15494.1005, 15598.8889,
                   15703.6772, 15808.4656, 15913.254, 16018.0423, 16122.8307, 16227.619, 16332.4074, 16437.1958,
                   16541.9841, 16646.7725, 16751.5608, 16856.3492, 16961.1376, 17065.9259, 17170.7143, 17275.5026,
                   17380.291, 17485.0794, 17589.8677, 17694.6561, 17799.4444, 17904.2328, 18009.0212, 18113.8095,
                   18218.5979, 18323.3862, 18428.1746, 18532.963, 18637.7513, 18742.5397, 18847.328, 18952.1164,
                   19056.9048, 19161.6931, 19266.4815, 19371.2698, 19476.0582, 19580.8466, 19685.6349, 19790.4233,
                   19895.2116, 20000.0]

b = [0, 0.0764, 0.2463, 0.396, 0.5298, 0.6508, 0.7612, 0.8627, 0.9567, 1.0441, 1.0554, 1.1649, 1.1983,
                   1.2186, 1.2333, 1.2448, 1.2542, 1.2623, 1.2692, 1.2754, 1.2809, 1.2859, 1.2905, 1.2947, 1.2986,
                   1.3022, 1.3056, 1.3088, 1.3118, 1.3147, 1.3174, 1.32, 1.3224, 1.3248, 1.327, 1.3292, 1.3312, 1.3332,
                   1.3352, 1.337, 1.3388, 1.3406, 1.3422, 1.3439, 1.3454, 1.347, 1.3485, 1.3499, 1.3513, 1.3527, 1.3541,
                   1.3554, 1.3566, 1.3579, 1.3591, 1.3603, 1.3615, 1.3626, 1.3637, 1.3648, 1.3659, 1.3669, 1.368, 1.369,
                   1.37, 1.3709, 1.3719, 1.3728, 1.3738, 1.3747, 1.3756, 1.3764, 1.3773, 1.3781, 1.379, 1.3798, 1.3806,
                   1.3814, 1.3822, 1.383, 1.3837, 1.3845, 1.3852, 1.386, 1.3867, 1.3874, 1.3881, 1.3888, 1.3895, 1.3902,
                   1.3908, 1.3915, 1.3921, 1.3928, 1.3934, 1.394, 1.3947, 1.3953, 1.3959, 1.3965, 1.3971, 1.3977,
                   1.3982, 1.3988, 1.3994, 1.3999, 1.4005, 1.401, 1.4016, 1.4021, 1.4027, 1.4032, 1.4037, 1.4042,
                   1.4047, 1.4053, 1.4058, 1.4063, 1.4068, 1.4072, 1.4077, 1.4082, 1.4087, 1.4092, 1.4096, 1.4101,
                   1.4105, 1.411, 1.4115, 1.4119, 1.4123, 1.4128, 1.4132, 1.4137, 1.4141, 1.4145, 1.4149, 1.4154,
                   1.4158, 1.4162, 1.4166, 1.417, 1.4174, 1.4178, 1.4182, 1.4186, 1.419, 1.4194, 1.4198, 1.4202,
                   1.4205, 1.4209, 1.4213, 1.4217, 1.422, 1.4224, 1.4228, 1.4231, 1.4235, 1.4238, 1.4242, 1.4246,
                   1.4249, 1.4253, 1.4256, 1.4259, 1.4263, 1.4266, 1.427, 1.4273, 1.4276, 1.428, 1.4283, 1.4286,
                   1.4289, 1.4293, 1.4296, 1.4299, 1.4302, 1.4305, 1.4309, 1.4312, 1.4315, 1.4318, 1.4321, 1.4324,
                   1.4327, 1.433, 1.4333, 1.4336, 1.4339, 1.4342, 1.4345, 1.4348, 1.4351, 1.4353, 1.4356, 1.4359,
                   1.4362, 1.4365]

import matplotlib.pyplot as plt
plt.figure(figsize=(6, 4))
plt.plot(h, b)
plt.xticks(np.arange(0,20001,5000), np.arange(0,20001,5000), fontsize=12)
plt.yticks(fontsize=12)
plt.xlabel('Magnetic Field Strength [A/m]', fontsize=12)
plt.ylabel('Flux Density [T]', fontsize=12)
plt.grid()
plt.savefig('media/bhcurve.png', dpi=300)
plt.show()